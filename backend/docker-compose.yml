version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: p2convert-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - p2convert-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2convert-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./uploads:/app/uploads
      - ./converted:/app/converted
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - p2convert-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Worker service 1
  worker-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2convert-worker-1
    restart: unless-stopped
    command: ["node", "workers/videoWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_ID=worker-1
    volumes:
      - ./uploads:/app/uploads
      - ./converted:/app/converted
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - p2convert-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Worker service 2
  worker-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2convert-worker-2
    restart: unless-stopped
    command: ["node", "workers/videoWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_ID=worker-2
    volumes:
      - ./uploads:/app/uploads
      - ./converted:/app/converted
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - p2convert-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Worker service 3
  worker-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2convert-worker-3
    restart: unless-stopped
    command: ["node", "workers/videoWorker.js"]
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - WORKER_ID=worker-3
    volumes:
      - ./uploads:/app/uploads
      - ./converted:/app/converted
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - p2convert-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: p2convert-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - p2convert-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: p2convert-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - p2convert-network

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: p2convert-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - p2convert-network

volumes:
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  p2convert-network:
    driver: bridge
