#!/bin/bash

# P2Convert System Report Script
# Generate weekly system health and performance report

set -e

# Configuration
REPORT_DIR="/var/log/p2convert-reports"
DATE=$(date +%Y%m%d)
REPORT_FILE="$REPORT_DIR/system_report_$DATE.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

# Create report directory
mkdir -p "$REPORT_DIR"

print_status "Generating system report for $DATE"

# Generate report
cat > "$REPORT_FILE" << EOF
========================================
P2Convert System Report
Date: $(date)
Generated by: system-report.sh
========================================

SYSTEM OVERVIEW
===============
Hostname: $(hostname)
Uptime: $(uptime)
Load Average: $(cat /proc/loadavg)
Memory Usage: $(free -h | grep Mem)
Disk Usage: $(df -h / | tail -1)
CPU Info: $(lscpu | grep "Model name" | cut -d: -f2 | xargs)

SERVICES STATUS
===============
EOF

# Check service status
echo "Nginx: $(systemctl is-active nginx)" >> "$REPORT_FILE"
echo "Redis: $(systemctl is-active redis-server)" >> "$REPORT_FILE"
echo "PM2: $(systemctl is-active p2convert)" >> "$REPORT_FILE"

# PM2 process status
echo "" >> "$REPORT_FILE"
echo "PM2 PROCESSES:" >> "$REPORT_FILE"
pm2 list >> "$REPORT_FILE"

# Disk usage details
echo "" >> "$REPORT_FILE"
echo "DETAILED DISK USAGE:" >> "$REPORT_FILE"
df -h >> "$REPORT_FILE"

# Memory usage details
echo "" >> "$REPORT_FILE"
echo "DETAILED MEMORY USAGE:" >> "$REPORT_FILE"
free -h >> "$REPORT_FILE"

# Network connections
echo "" >> "$REPORT_FILE"
echo "NETWORK CONNECTIONS:" >> "$REPORT_FILE"
netstat -tuln | grep -E ":(80|443|3001|6379)" >> "$REPORT_FILE"

# Recent logs
echo "" >> "$REPORT_FILE"
echo "RECENT ERROR LOGS (last 50 lines):" >> "$REPORT_FILE"
tail -50 /var/log/nginx/p2convert_error.log >> "$REPORT_FILE" 2>/dev/null || echo "No Nginx error logs found" >> "$REPORT_FILE"

# Application metrics
echo "" >> "$REPORT_FILE"
echo "APPLICATION METRICS:" >> "$REPORT_FILE"
curl -s http://localhost:3001/api/conversion/stats >> "$REPORT_FILE" 2>/dev/null || echo "Backend API not responding" >> "$REPORT_FILE"

# Queue statistics
echo "" >> "$REPORT_FILE"
echo "QUEUE STATISTICS:" >> "$REPORT_FILE"
redis-cli info stats | grep -E "(connected_clients|used_memory|keyspace)" >> "$REPORT_FILE" 2>/dev/null || echo "Redis not responding" >> "$REPORT_FILE"

# File counts
echo "" >> "$REPORT_FILE"
echo "FILE COUNTS:" >> "$REPORT_FILE"
echo "Uploads directory: $(find /var/www/p2convert/uploads -type f | wc -l) files" >> "$REPORT_FILE"
echo "Converted directory: $(find /var/www/p2convert/converted -type f | wc -l) files" >> "$REPORT_FILE"
echo "Temp directory: $(find /var/www/p2convert/temp -type f | wc -l) files" >> "$REPORT_FILE"

# Security status
echo "" >> "$REPORT_FILE"
echo "SECURITY STATUS:" >> "$REPORT_FILE"
echo "Failed login attempts (last 24h): $(grep "Failed password" /var/log/auth.log | grep "$(date +%b\ %d)" | wc -l)" >> "$REPORT_FILE"
echo "SSH connections (last 24h): $(grep "Accepted password" /var/log/auth.log | grep "$(date +%b\ %d)" | wc -l)" >> "$REPORT_FILE"

# Performance metrics
echo "" >> "$REPORT_FILE"
echo "PERFORMANCE METRICS:" >> "$REPORT_FILE"
echo "Average response time: $(curl -w "@curl-format.txt" -o /dev/null -s http://localhost:3001/health 2>/dev/null || echo "N/A")" >> "$REPORT_FILE"

# Recommendations
echo "" >> "$REPORT_FILE"
echo "RECOMMENDATIONS:" >> "$REPORT_FILE"

# Check disk space
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 80 ]; then
    echo "- WARNING: Disk usage is ${DISK_USAGE}%. Consider cleaning up old files." >> "$REPORT_FILE"
fi

# Check memory usage
MEM_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ "$MEM_USAGE" -gt 80 ]; then
    echo "- WARNING: Memory usage is ${MEM_USAGE}%. Consider optimizing or adding more RAM." >> "$REPORT_FILE"
fi

# Check load average
LOAD_AVG=$(cat /proc/loadavg | awk '{print $1}')
CPU_CORES=$(nproc)
if (( $(echo "$LOAD_AVG > $CPU_CORES" | bc -l) )); then
    echo "- WARNING: Load average ($LOAD_AVG) is higher than CPU cores ($CPU_CORES)." >> "$REPORT_FILE"
fi

echo "- System is running normally." >> "$REPORT_FILE"

# Create curl format file for timing
cat > curl-format.txt << 'EOF'
     time_namelookup:  %{time_namelookup}\n
        time_connect:  %{time_connect}\n
     time_appconnect:  %{time_appconnect}\n
    time_pretransfer:  %{time_pretransfer}\n
       time_redirect:  %{time_redirect}\n
  time_starttransfer:  %{time_starttransfer}\n
                     ----------\n
          time_total:  %{time_total}\n
EOF

# Clean up
rm -f curl-format.txt

print_status "âœ… System report generated: $REPORT_FILE"

# Send report via email if configured
if [ ! -z "$REPORT_EMAIL" ]; then
    print_status "Sending report via email..."
    mail -s "P2Convert System Report - $DATE" "$REPORT_EMAIL" < "$REPORT_FILE"
fi

# Keep only last 4 reports
find "$REPORT_DIR" -name "system_report_*.txt" -mtime +28 -delete

print_status "System report completed"
